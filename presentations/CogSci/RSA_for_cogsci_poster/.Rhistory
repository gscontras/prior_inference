median(data[, length(x) + 3])
hist(data[, length(x) + 4])
median(data[, length(x) + 1] - 2 * 1 * (length(x) / (length(x) - 1 - 1)))
median(data[, length(x) + 2] - 2 * 2 * (length(x) / (length(x) - 2 - 1)))
median(data[, length(x) + 3] - 2 * 2 * (length(x) / (length(x) - 2 - 1)))
hist(data[, length(x) + 4])
range(m1$value)
0.6*log(2)
0.2*log(1)
0.2*log(2)
log(0.2)
log(0.6)
log(0.3)
1.2-0.51
log(0.2)
log(1)
log(0.2)-log(0.1)
ln(0.2) + ln(0.3) + ln(0.3) + ln(0.1) + ln(0.3)
log(0.2) + log(0.3) + log(0.3) + log(0.1) + log(0.3)
log(0.3)
log(0.2)+log(0.3)+log(0.3)+log(0.1)+log(0.3)
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08")
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08/Model_comaprison")
x3_full_kl <- read.csv("x3_model_comparison.csv", sep = ";")
x3_full_kl <- x3_full_kl[,c("workerid","Uniform.KL","P.only.KL","L.only.KL","OL.KL","PL.KL","POL.KL")]
colnames(x3_full_kl) <- c("workerid","uniform","preference","klFactor","obedience_klFactor","preference_klFactor","preference_obedience_klFactor")
# Does optimizing for obedience and klFactor improve fit compared to just klFactor? No
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08")
x3_simple_kl <- read.csv("X3_Data/x3KLDivs_simpleRSA_indOpt_2019_10_11.csv")
x3_simple_kl$X <- NULL
colnames(x3_simple_kl) <- c("workerid","uniform","preference","obedience","klFactor","obedience_klFactor",
"preference_klFactor","preference_obedience_klFactor")
totalDiff <- sum(x3_simple_kl$preference_klFactor - x3_simple_kl$klFactor)
g2 <- totalDiff*2
g2 > qchisq(.95, df=82)
totalDiff <- sum(x3_simple_kl$klFactor - x3_simple_kl$uniform)
g2 <- totalDiff*2
abs(g2) > qchisq(.99, df=82)
x3_simple_kl <- read.csv("X3_Data/x3KLDivs_simpleRSA_indOpt_2019_10_11.csv")
x3_simple_kl$X <- NULL
colnames(x3_simple_kl) <- c("workerid","uniform","preference","obedience","klFactor","obedience_klFactor",
"preference_klFactor","preference_obedience_klFactor")
head(x3_simple_kl)
totalDiff <- sum(x3_simple_kl$klFactor - x3_simple_kl$uniform)
g2 <- totalDiff*2
abs(g2) > qchisq(.99, df=82)
max(x3_simple_kl$workerid)
length(levels(as.factor(x3_simple_kl$workerid)))
444-437.7
qchisq(.95,1)
qchisq(.99,1)
totalDiff <- 444.0236 - 437.178
g2 <- totalDiff*2 # G^2 value
qchisq(.95, df=3) # to display cut-off point
abs(g2) > qchisq(.995, df=3)
uniform <- -2*444.0234
softness <- -2*437.734969805529 + 2
obedience <- -2 * 437.533827791963 + 2
lambda <- -2* 438.502038974456 + 2
threeParam <- -2*437.178176260295 + 6
uniform
softness
obedience
lambda
threeParam
uniform <- 2*444.0234
softness <- 2*437.734969805529 + 2
obedience <- 2 * 437.533827791963 + 2
lambda <- 2* 438.502038974456 + 2
threeParam <- 2*437.178176260295 + 6
uniform
softness
obedience
lambda
threeParam
uniform <- 2*444.0234
softness <- 2*437.734969805529 + 2
obedience <- 2 * 437.533827791963 + 2
lambda <- 2* 438.502038974456 + 2
twoParam1 <- 2* 437.520680667863 + 4
twoParam2 <- 2* 437.211683472852 + 4
threeParam <- 2*437.178176260295 + 6
twoParam1
twoParam2
colnames(globalResults) <- c("uniform", "softness", "obedience", "lambda", "twoParam1", "twoParam2", "three-Param")
globalResults <- matrix(0,1,7)
colnames(globalResults) <- c("uniform", "softness", "obedience", "lambda", "twoParam1", "twoParam2", "three-Param")
globalResults[1,] <- c(uniform, softness, obedience, lambda, twoParam1, twoParam2, threeParam)
globalResults
globalResults[2,] <- c(uniform-uniform, uniform-softness, uniform-obedience, uniform-lambda, uniform-twoParam1,
uniform-twoParam2, uniform-threeParam)
globalResults <- matrix(0,2,7)
colnames(globalResults) <- c("uniform", "softness", "obedience", "lambda", "twoParam1", "twoParam2", "three-Param")
globalResults[1,] <- c(uniform, softness, obedience, lambda, twoParam1, twoParam2, threeParam)
globalResults[2,] <- c(uniform-uniform, uniform-softness, uniform-obedience, uniform-lambda, uniform-twoParam1,
uniform-twoParam2, uniform-threeParam)
globalResults
totalDiff <- sum(x3_simple_kl$klFactor - x3_simple_kl$uniform)
g2 <- totalDiff*2
abs(g2) > qchisq(.99, df=82)
totalDiff <- sum(x3_simple_kl$klFactor - x3_simple_kl$uniform)
g2 <- totalDiff*2
abs(g2) > qchisq(.995, df=82)
uniformInd <- x3_simple_kl$uniform*2
lambdaInd <- (sum(x3_simple_kl$klFactor))*2
uniformInd
# AIC
uniformInd <- sum(x3_simple_kl$uniform)*2
uniformInd
uniformInd <- sum(x3_simple_kl$uniform)*2
lambdaInd <- (sum(x3_simple_kl$klFactor))*2
lambdaInd
lambdaInd <- (sum(x3_simple_kl$klFactor))*2 + (2*82) #
lambdaInd
lambdaInd <- (sum(x3_simple_kl$klFactor))*2 + (2*82) #
softnessInd <- (sum(x3_simple_kl$softness))*2 + (2*82)
obedienceInd <- (sum(x3_simple_kl$obedience))*2 + (2*82)
softnessInd
obedienceInd
sum(x3_simple_kl$softness)
x3_simple_kl
softnessInd <- (sum(x3_simple_kl$preference))*2 + (2*82)
softnessInd
obedienceInd
indResults <- matrix(0,2,7)
colnames(indResults) <- c("uniform", "softness", "obedience", "lambda")
globalResults[1,] <- c(uniform, softnessInd, obedienceInd, lambdaInd)
globalResults[2,] <- c(uniform-uniform, uniform-softnessInd, uniform-obedienceInd, uniform-lambdaInd)
indResults <- matrix(0,2,4)
colnames(indResults) <- c("uniform", "softness", "obedience", "lambda")
globalResults[1,] <- c(uniform, softnessInd, obedienceInd, lambdaInd)
globalResults[2,] <- c(uniform-uniform, uniform-softnessInd, uniform-obedienceInd, uniform-lambdaInd)
indResults <- matrix(0,2,4)
colnames(indResults) <- c("uniform", "softness", "obedience", "lambda")
indResults[1,] <- c(uniform, softnessInd, obedienceInd, lambdaInd)
indResults[2,] <- c(uniform-uniform, uniform-softnessInd, uniform-obedienceInd, uniform-lambdaInd)
indResults
setwd("~/Documents/GitHub/prior_inference/presentations/CogSci/RSA_for_cogsci_poster")
library(reshape2)
library(Rmisc)
library(ggplot2)
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
summary(data$CCode)
global <- read.csv("x3pDataAugm_simpleRSAglobalOpt_prefAndKappa_and_prefObedAndKappa.csv")
head(global)
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08")
source("CommonCode/RSA_StratUtt.R")
source("CommonCode/getConstCodeStratUtt.R")
# loading the augmented pilot data file
################### full RSA ########################
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost1_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPost2_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefOnly_and_obedOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_kappaOnly_and_obedAndKappa.csv")
x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefAndKappa_and_prefObedAndKappa.csv")
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost1_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPost2_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
#write.csv(modelDataOrdered, "x3pilotDataModelOptimizedSorted.csv")
write.csv(modelDataOrdered, "x3pilotDataModelOptimizedSorted_global.csv")
global <- read.csv("x3pilotDataModelOptimizedSorted.csv_global")
setwd("~/Documents/GitHub/prior_inference/presentations/CogSci/RSA_for_cogsci_poster")
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
summary(data$CCode)
global <- read.csv("x3pilotDataModelOptimizedSorted.csv_global")
global <- read.csv("x3pilotDataModelOptimizedSorted_global.csv")
global <- read.csv("x3pilotDataModelOptimizedSorted_global.csv")
colnames(global) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
sample <- subset(data, CCode == "22b2b")
sample_global <- subset(global, CCode == "22b2b")
sample <- subset(data, CCode == "22b2b")
sample_global <- subset(global, CCode == "22b2b")
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
summary(data$CCode)
global <- read.csv("x3pilotDataModelOptimizedSorted_global.csv")
colnames(global) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
sample <- subset(data, CCode == "22b2b")
sample_global <- subset(global, CCode == "22b2b")
behavior <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("DPost_1","DPost_2","DPost_3","DPost_4","DPost_5","DPost_6","DPost_7","DPost_8","DPost_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
modelNotOpt <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost1_1","MPost1_2","MPost1_3","MPost1_4","MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
model <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5","MPost2_6","MPost2_7","MPost2_8","MPost2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
globalOpt <- melt(global,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5","MPost2_6","MPost2_7","MPost2_8","MPost2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
behavior$sliderNumber <- gsub(paste0("DPost_",collapse = "|"),"", behavior$sliderNumber)
modelNotOpt$sliderNumber <- gsub(paste0("MPost1_",collapse = "|"),"", modelNotOpt$sliderNumber)
model$sliderNumber <- gsub(paste0("MPost2_",collapse = "|"),"", model$sliderNumber)
globalOpt$sliderNumber <- gsub(paste0("MPost2_",collapse = "|"),"", globalOpt$sliderNumber)
statsBehavior <- summarySE(behavior, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModelNotOpt <- summarySE(modelNotOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModel <- summarySE(model, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsGlobal <- summarySE(globalOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsBehavior$type <- "behavior"
statsModel$type <- "model"
statsModelNotOpt$type <- "modelNotOpt"
statsGlobal$type <- "global"
behaviorPlot <- statsBehavior[c(1:6),]
modelPlot <- statsModel[c(1:6),]
modelNotOptPlot <- statsModelNotOpt[c(1:6),]
globalPlot <- statsGlobal[c(1:6),]
allStats <- rbind(behaviorPlot,modelPlot,modelNotOptPlot,globalPlot)
allStats
statsGlobal
head(globalOpt)
range(globalOpt$sliderValue)
globalOpt$sliderValue
view(globalOpt)
View(globalOpt)
negative <- subset(globalOpt, sliderValue < 0)
negative
globalOpt <- melt(sample_global,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5","MPost2_6","MPost2_7","MPost2_8","MPost2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
behavior$sliderNumber <- gsub(paste0("DPost_",collapse = "|"),"", behavior$sliderNumber)
modelNotOpt$sliderNumber <- gsub(paste0("MPost1_",collapse = "|"),"", modelNotOpt$sliderNumber)
model$sliderNumber <- gsub(paste0("MPost2_",collapse = "|"),"", model$sliderNumber)
globalOpt$sliderNumber <- gsub(paste0("MPost2_",collapse = "|"),"", globalOpt$sliderNumber)
# behavior$sliderValue <- as.numeric(behavior$sliderValue)
statsBehavior <- summarySE(behavior, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModelNotOpt <- summarySE(modelNotOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModel <- summarySE(model, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsGlobal <- summarySE(globalOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsBehavior$type <- "behavior"
statsModel$type <- "model"
statsModelNotOpt$type <- "modelNotOpt"
statsGlobal$type <- "global"
behaviorPlot <- statsBehavior[c(1:6),]
modelPlot <- statsModel[c(1:6),]
modelNotOptPlot <- statsModelNotOpt[c(1:6),]
globalPlot <- statsGlobal[c(1:6),]
allStats <- rbind(behaviorPlot,modelPlot,modelNotOptPlot,globalPlot)
allStats
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory3","ivory4","ivory6"), labels = c("Data","Indiv. opt","Non-opt. model", "Global. opt"), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory3","ivory4","cadetblue"), labels = c("Data","Indiv. opt","Non-opt. model", "Global. opt"), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory3","ivory4","cadetblue"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("ivory","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")+
#  theme (axis.text.x=element_text(size = 16),
#        axis.text.y=element_text(size = 16),
#         axis.title.x=element_text(size = 16),
##        axis.title.y=element_text(size = 16),
#         legend.text=element_text(size = 14))
#ggsave("utterancePlot.pdf")
ggsave("barplot_x3_withGlobal.pdf",width=5,height=4.5, units = "in")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")+
#  theme (axis.text.x=element_text(size = 16),
#        axis.text.y=element_text(size = 16),
#         axis.title.x=element_text(size = 16),
##        axis.title.y=element_text(size = 16),
#         legend.text=element_text(size = 14))
#ggsave("utterancePlot.pdf")
ggsave("barplot_x3_withGlobal.pdf",width=5.5,height=4.5, units = "in")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")+
#  theme (axis.text.x=element_text(size = 16),
#        axis.text.y=element_text(size = 16),
#         axis.title.x=element_text(size = 16),
##        axis.title.y=element_text(size = 16),
#         legend.text=element_text(size = 14))
#ggsave("utterancePlot.pdf")
ggsave("barplot_x3_withGlobal.pdf",width=6.5,height=4.5, units = "in")
