# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
#write.csv(modelDataOrdered, "x3pilotDataModelOptimizedSorted.csv")
################################################################################
x3pilotData <- x3pilotData[order(x3pilotData$CCode),]
myCCodes <- unique(x3pilotData$CCode)
avDataMatrix <- matrix(0,length(myCCodes),19)
dataPointIndex <- 0
workerData <- 0
rsaModel1 <- 0
rsaModel2 <- 0
runIndex <- 1
for(i in c(1:length(myCCodes))) {
cc <- myCCodes[i]
cases <- which(x3pilotData$CCode == cc)
allPilotDataCases <- x3pilotData[cases,]
workerMeans <- 0
rsaModel1Means <- 0
rsaModel2Means <- 0
for(j in c(1:nrow(allPilotDataCases))) {
workerMeans <-  workerMeans + allPilotDataCases[j,subjectGuessIndexM1+(allPilotDataCases$featValOrder[[j]])]
rsaModel1Means <- rsaModel1Means + allPilotDataCases[j,modelGuessIndex1M1+(allPilotDataCases$featValOrder[[j]])]
rsaModel2Means <- rsaModel2Means + allPilotDataCases[j,modelGuessIndex2M1+(allPilotDataCases$featValOrder[[j]])]
}
for(j in c(1:length(workerMeans))) {
workerData[runIndex] <- workerMeans[[j]] / nrow(allPilotDataCases)
rsaModel1[runIndex] <- rsaModel1Means[[j]] / nrow(allPilotDataCases)
rsaModel2[runIndex] <- rsaModel2Means[[j]] / nrow(allPilotDataCases)
runIndex <- runIndex+1
}
}
rsaModel1 <- as.array(rsaModel1)
plot(rsaModel1, workerData)
abline(lm(formula = rsaModel1~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel1,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel1~workerData)
summary(model)
confint(model)
rsaModel2 <- as.array(rsaModel2)
plot(rsaModel2, workerData)
abline(lm(formula = rsaModel2~workerData), col="red") # regression line (y~x)
model <- lm(formula = rsaModel2~workerData)
summary(model)
d = data.frame(rsaModel2,workerData)
require(ggplot2)
ggplot(d, aes(x=rsaModel,y=workerData)) +
geom_point() +
geom_smooth(method=lm,color="black") +
xlab("model predictions")+
ylab("human data")+
theme_bw()
ggplot(d, aes(x=rsaModel2,y=workerData)) +
geom_point() +
geom_smooth(method=lm,color="black") +
xlab("model predictions")+
ylab("human data")+
theme_bw()
ggsave("../RSA_for_cogsci_poster/X3-scatter-simple-CogSci.png",width=2,height=1.875)
require(hydroGOF)
gof(as.numeric(d$rsaModel),as.numeric(d$workerData)) ## r2 = 0.96
library(boot)
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
results <- boot(data=d, statistic=rsq, R=10000, formula=workerData~rsaModel)
boot.ci(results, type="bca") # 95% CI  ( 0.9453,  0.9701 )
gof(as.numeric(d$rsaModel2),as.numeric(d$workerData)) ## r2 = 0.93
library(boot)
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
results <- boot(data=d, statistic=rsq, R=10000, formula=workerData~rsaModel2)
boot.ci(results, type="bca") # 95% CI  ( 0.9453,  0.9701 )
rsaModel1 <- as.array(rsaModel1)
d1 = data.frame(rsaModel1,workerData)
require(hydroGOF)
gof(as.numeric(d1$rsaModel1),as.numeric(d1$workerData)) ## r2 = 0.93
model <- lm(formula = rsaModel1~workerData)
summary(model)
gof(as.numeric(d1$rsaModel1),as.numeric(d1$workerData)) ## r2 = 0.07
# function to obtain R-Squared from the data
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
results <- boot(data=d1, statistic=rsq, R=10000, formula=workerData~rsaModel1)
boot.ci(results, type="bca") # 95% CI  ( 0.8759,  0.9585 )
write.csv(modelDataOrdered, "../RSA_for_cogsci_poster/x3pilotDataModelOptimizedSorted.csv")
library(reshape2)
library(Rmisc)
library(ggplot2)
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
setwd("~/git/prior_inference/RSA_2019_07_05/")
source("RSA_StratUttModel_2019_0114.R")
source("RSA_StratUtt_getConstCode_2019_0114.R")
# loading the augmented pilot data (processed via RSA_x3PilotDataProcessing01.R)
#x3pilotData <- read.csv("x3pilotDataAugm_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_ADandBD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_ABandABD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_.2fixAndD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_.2ADandBD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm.2_fixedAndD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_.2ADandBD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm.2_ABandABD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_CrossVal_SimpleRSA_Opt34_2019_05_17.csv")
#x3pilotData <- read.csv("x3pilotDataAugmV.2_fixedAndD_052019.csv")
x3pilotData <- read.csv("x3pilotDataAugmV0_fixedAndD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugmV0_ADandBD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugmV0_ABandABD_052019.csv")
#x3pilotData <- read.csv("x3pilotDataAugm_fixedAndD_052019.csv")
## adding the 1-27 target and object2 & object3 code.
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost1_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPost2_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
write.csv(modelDataOrdered, "../RSA_for_cogsci_poster/x3pilotDataModelOptimizedSorted.csv")
library(reshape2)
library(Rmisc)
library(ggplot2)
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
head(Data)
head(data)
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
head(data)
setwd("~/git/prior_inference/RSA_for_cogsci_poster/")
data = read.csv("x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
#sample2 <- subset(data, CCode == "22a1")
#sample3 <- subset(data, CCode == "211")
#unsorted <- read.csv("x3pilotDataAugmV0_fixedAndD_052019.csv")
# sample <- data.frame(apply(sample, 2, function(x) {x <- gsub("\"", "", x)}))
sample <- subset(data, CCode == "22b2b")
# sample <- subset(data, CCode == "22a1")
currentObjects <- c(13,17,25)
## Now reshape the table
behavior <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("DPost_1","DPost_2","DPost_3","DPost_4","DPost_5","DPost_6","DPost_7","DPost_8","DPost_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
modelNotOpt <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost1_1","MPost1_2","MPost1_3","MPost1_4","MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
model <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5","MPost2_6","MPost2_7","MPost2_8","MPost2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
behavior$sliderNumber <- gsub(paste0("DPost_",collapse = "|"),"", behavior$sliderNumber)
modelNotOpt$sliderNumber <- gsub(paste0("MPost1_",collapse = "|"),"", modelNotOpt$sliderNumber)
model$sliderNumber <- gsub(paste0("MPost2_",collapse = "|"),"", model$sliderNumber)
# behavior$sliderValue <- as.numeric(behavior$sliderValue)
statsBehavior <- summarySE(behavior, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModelNotOpt <- summarySE(modelNotOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModel <- summarySE(model, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsBehavior$type <- "behavior"
statsModel$type <- "model"
statsModelNotOpt$type <- "modelNotOpt"
behaviorPlot <- statsBehavior[c(1:6),]
modelPlot <- statsModel[c(1:6),]
modelNotOptPlot <- statsModelNotOpt[c(1:6),]
allStats <- rbind(behaviorPlot,modelPlot,modelNotOptPlot)
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("gold","ivory3","ivory4"), labels = c("Human data","Optimized model","Non-optimized model"), name = "") +
theme_bw()+
labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("Utterances")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("red", "green", "dotted","striped","circle","cloud"))+
theme(legend.position="top")
library(reshape2) # convert wide format data to long/tidy format
library(plyr)
library(ggplot2)
library(Rmisc) # for confidence intervals
data = read.csv("x4pilotDataModelOptimizedSorted.csv")
sample <- subset(data, CCode == 212212)
example <- subset(sample,target == "122" & obj2 == "232" & obj3 == "133")
behavior <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("DataPost_1","DataPost_2","DataPost_3","DataPost_4","DataPost_5","DataPost_6","DataPost_7","DataPost_8","DataPost_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
modelNotOpt <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("Post1_1","Post1_2","Post1_3","Post1_4","Post1_5","Post1_6","Post1_7","Post1_8","Post1_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
model <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("Post2_1","Post2_2","Post2_3","Post2_4","Post2_5","Post2_6",
"Post2_7","Post2_8","Post2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
behavior$sliderNumber <- gsub(paste0("DataPost_",collapse = "|"),"", behavior$sliderNumber)
model$sliderNumber <- gsub(paste0("Post2_",collapse = "|"),"", model$sliderNumber)
modelNotOpt$sliderNumber <- gsub(paste0("Post1_",collapse = "|"),"", modelNotOpt$sliderNumber)
head(behavior)
statsBehavior <- summarySE(behavior, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModel <- summarySE(model, measurevar="sliderValue", groupvars="sliderNumber")
statsModelNotOpt <- summarySE(modelNotOpt, measurevar="sliderValue", groupvars="sliderNumber")
statsBehavior$type <- "behavior"
statsModel$type <- "model"
statsModelNotOpt$type <- "modelNotOpt"
statsBehavior
head(behavior)
summary(behavior)
unique(behavior$sliderNumber)
behavior <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("DataPost_1","DataPost_2","DataPost_3","DataPost_4","DataPost_5","DataPost_6","DataPost_7","DataPost_8","DataPost_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
head(behavior)
behavior$sliderNumber <- gsub(paste0("DataPost_",collapse = "|"),"", behavior$sliderNumber)
head(behavior)
behavior
data = read.csv("x4pilotDataModelOptimizedSorted.csv")
sample <- subset(data, CCode == 212212)
example <- subset(sample,target == "122" & obj2 == "232" & obj3 == "133")
## First, we reshape the data table into long/tidy format
behavior <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("DataPost_1","DataPost_2","DataPost_3","DataPost_4","DataPost_5","DataPost_6","DataPost_7","DataPost_8","DataPost_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
modelNotOpt <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("Post1_1","Post1_2","Post1_3","Post1_4","Post1_5","Post1_6","Post1_7","Post1_8","Post1_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
model <- melt(sample,
id.vars = c( "workerid", "item" ,"slide_number","pref1","response1","pref2", "response2","pref3","response3","pref4",
"response4","pref5","response5",
"pref6","response6", "target", "obj2","obj3","utterance", "itemCode","ambiguous",
"uttFeat", "q1Feat", "q2Feat", "targetOC27","obj2OC27","obj3OC27","CCode"),
measure.vars = c("Post2_1","Post2_2","Post2_3","Post2_4","Post2_5","Post2_6",
"Post2_7","Post2_8","Post2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
behavior$sliderNumber <- gsub(paste0("DataPost_",collapse = "|"),"", behavior$sliderNumber)
model$sliderNumber <- gsub(paste0("Post2_",collapse = "|"),"", model$sliderNumber)
modelNotOpt$sliderNumber <- gsub(paste0("Post1_",collapse = "|"),"", modelNotOpt$sliderNumber)
## Now get a summary of descriptive statistics
statsBehavior <- summarySE(behavior, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModel <- summarySE(model, measurevar="sliderValue", groupvars="sliderNumber")
statsModelNotOpt <- summarySE(modelNotOpt, measurevar="sliderValue", groupvars="sliderNumber")
statsBehavior$type <- "behavior"
statsModel$type <- "model"
statsModelNotOpt$type <- "modelNotOpt"
behaviorPlot <- statsBehavior[c(4,5,7,8),]
behaviorPlot
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("gold","ivory3","ivory4"), labels = c("Human data","Optimized model","Non-optimized model"), name = "") +
theme_bw()+
#labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("red", "green", "dotted","striped","circle","cloud"))+
theme(legend.position="bottom")
ggsave("utterancePlot.pdf")
ggsave("X3-example-simple-model-CogSci.png",width=4.3,height=4)
ggsave("X3-example-simple-model-CogSci.png",width=4.3,height=3)
ggsave("X3-example-simple-model-CogSci.png",width=4.3,height=2.5)
ggsave("X3-example-simple-model-CogSci.png",width=4.3,height=2.4)
ggsave("X3-example-simple-model-CogSci.png",width=4.3,height=2.45)
ggsave("X3-example-simple-model-CogSci.png",width=4.3,height=2.44)
setwd("~/git/prior_inference/RSA_2019_01/")
source("RSA_StratUttModel_2019_0114.R")
source("RSA_StratUtt_getConstCode_2019_0114.R")
x3pilotData <- read.csv("x3pilotDataAugmented012019.csv")
## adding the 1-27 target and object2 & object3 code.
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPostNO_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPostNO_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
#write.csv(x3pilotData, "x3pilotDataModelOptimizedSorted.csv")
################################################################################
x3pilotData <- x3pilotData[order(x3pilotData$CCode),]
myCCodes <- unique(x3pilotData$CCode)
avDataMatrix <- matrix(0,length(myCCodes),19)
dataPointIndex <- 0
workerData <- 0
rsaModel1 <- 0
rsaModel2 <- 0
runIndex <- 1
for(i in c(1:length(myCCodes))) {
cc <- myCCodes[i]
cases <- which(x3pilotData$CCode == cc)
allPilotDataCases <- x3pilotData[cases,]
workerMeans <- 0
rsaModel1Means <- 0
rsaModel2Means <- 0
for(j in c(i:nrow(allPilotDataCases))) {
workerMeans <-  workerMeans + allPilotDataCases[j,subjectGuessIndexM1+(allPilotDataCases$featValOrder[[j]])]
rsaModel1Means <- rsaModel1Means + allPilotDataCases[j,modelGuessIndex1M1+(allPilotDataCases$featValOrder[[j]])]
rsaModel2Means <- rsaModel2Means + allPilotDataCases[j,modelGuessIndex2M1+(allPilotDataCases$featValOrder[[j]])]
}
for(j in c(1:length(workerMeans))) {
workerData[runIndex] <- workerMeans[[j]] / nrow(allPilotDataCases)
rsaModel1[runIndex] <- rsaModel1Means[[j]] / nrow(allPilotDataCases)
rsaModel2[runIndex] <- rsaModel2Means[[j]] / nrow(allPilotDataCases)
runIndex <- runIndex+1
}
}
### plot after Optimization ###
rsaModel1 <- as.array(rsaModel1)
plot(rsaModel1, workerData)
abline(lm(formula = rsaModel1~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel1,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel1~workerData)
summary(model)
confint(model)
plot(rsaModel2, workerData)
abline(lm(formula = rsaModel2~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel2,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel2~workerData)
summary(model)
confint(model)
d = data.frame(rsaModel1,workerData)
require(ggplot2)
ggplot(d, aes(x=rsaModel1,y=workerData)) +
geom_point() +
geom_smooth(method=lm,color="black") +
xlab("\nmodel predictions")+
ylab("human data\n")+
theme_bw()
### correlation analysis for paper
require(boot)
require(zoo)
require(hydroGOF)
gof(as.numeric(d$rsaModel1),as.numeric(d$workerData)) ## r2 = 0.91
results <- boot(data=d, statistic=rsq, R=10000, formula=workerData~rsaModel1)
boot.ci(results, type="bca") # 95% CI  ( 0.8395,  0.9466 )
ggsave("../RSA_for_cogsci_poster/X3-scatter-fully-pragmatic-CogSci.png",width=2,height=1.875)
ggplot(d, aes(x=rsaModel1,y=workerData)) +
geom_point() +
geom_smooth(method=lm,color="black") +
xlab("model predictions")+
ylab("human data")+
theme_bw()
ggsave("../RSA_for_cogsci_poster/X3-scatter-fully-pragmatic-CogSci.png",width=2,height=1.875)
