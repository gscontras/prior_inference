workerData[runIndex] <- workerMeans[[j]] / nrow(allPilotDataCases)
rsaModel1[runIndex] <- rsaModel1Means[[j]] / nrow(allPilotDataCases)
rsaModel2[runIndex] <- rsaModel2Means[[j]] / nrow(allPilotDataCases)
runIndex <- runIndex+1
}
}
### plot after Optimization ###
rsaModel1 <- as.array(rsaModel1)
plot(rsaModel1, workerData)
abline(lm(formula = rsaModel1~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel1,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel1~workerData)
summary(model)
confint(model)
### plot with default parameters ###
rsaModel2 <- as.array(rsaModel2)
plot(rsaModel2, workerData)
abline(lm(formula = rsaModel2~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel2,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel2~workerData)
summary(model)
confint(model)
source("CommonCode/RSA_StratUtt.R")
source("CommonCode/getConstCodeStratUtt.R")
# loading the augmented pilot data file
################### full RSA ########################
### full RSA - individually optimized
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_fixed_and_PrefOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_KappaOnly_and_ObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_PrefAndKappa_and_PrefObedAndKappa.csv")
################### simple RSA ######################
### simple RSA - individually optimized
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed001_and_fixed000.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_prefOnly_and_obedOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_kappaOnly_and_obedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_prefAndKappa_and_prefObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed00-1_and_uniform.csv")
x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed001_and_Lambda.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefOnly_and_obedOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_kappaOnly_and_obedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefAndKappa_and_prefObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_SRSAcrossVal_KappaOnly_and_PrefAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_SRSAcrossVal_ObedAndKappa_and_PrefObedAndKappa.csv")
## adding the 1-27 target and object2 & object3 code.
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost1_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPost2_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
write.csv(modelDataOrdered, "X3_Data/x3pilotDataModelOptimizedSorted.csv")
#write.csv(modelDataOrdered, "x3pilotDataModelOptimizedSorted_global.csv")
################################################################################
x3pilotData <- x3pilotData[order(x3pilotData$CCode),]
myCCodes <- unique(x3pilotData$CCode)
avDataMatrix <- matrix(0,length(myCCodes),19)
dataPointIndex <- 0
workerData <- 0
rsaModel1 <- 0
rsaModel2 <- 0
runIndex <- 1
for(i in c(1:length(myCCodes))) {
cc <- myCCodes[i]
cases <- which(x3pilotData$CCode == cc)
allPilotDataCases <- x3pilotData[cases,]
workerMeans <- 0
rsaModel1Means <- 0
rsaModel2Means <- 0
for(j in c(1:nrow(allPilotDataCases))) {
workerMeans <-  workerMeans + allPilotDataCases[j,subjectGuessIndexM1+(allPilotDataCases$featValOrder[[j]])]
rsaModel1Means <- rsaModel1Means + allPilotDataCases[j,modelGuessIndex1M1+(allPilotDataCases$featValOrder[[j]])]
rsaModel2Means <- rsaModel2Means + allPilotDataCases[j,modelGuessIndex2M1+(allPilotDataCases$featValOrder[[j]])]
}
for(j in c(1:length(workerMeans))) {
workerData[runIndex] <- workerMeans[[j]] / nrow(allPilotDataCases)
rsaModel1[runIndex] <- rsaModel1Means[[j]] / nrow(allPilotDataCases)
rsaModel2[runIndex] <- rsaModel2Means[[j]] / nrow(allPilotDataCases)
runIndex <- runIndex+1
}
}
### plot after Optimization ###
rsaModel1 <- as.array(rsaModel1)
plot(rsaModel1, workerData)
abline(lm(formula = rsaModel1~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel1,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel1~workerData)
summary(model)
confint(model)
### plot with default parameters ###
rsaModel2 <- as.array(rsaModel2)
plot(rsaModel2, workerData)
abline(lm(formula = rsaModel2~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel2,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel2~workerData)
summary(model)
confint(model)
source("CommonCode/RSA_StratUtt.R")
source("CommonCode/getConstCodeStratUtt.R")
# loading the augmented pilot data file
################### full RSA ########################
### full RSA - individually optimized
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_fixed_and_PrefOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_KappaOnly_and_ObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_PrefAndKappa_and_PrefObedAndKappa.csv")
################### simple RSA ######################
### simple RSA - individually optimized
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed001_and_fixed000.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_prefOnly_and_obedOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_kappaOnly_and_obedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_prefAndKappa_and_prefObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed00-1_and_uniform.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed001_and_Lambda.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefOnly_and_obedOnly.csv")
x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_kappaOnly_and_obedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefAndKappa_and_prefObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_SRSAcrossVal_KappaOnly_and_PrefAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_SRSAcrossVal_ObedAndKappa_and_PrefObedAndKappa.csv")
## adding the 1-27 target and object2 & object3 code.
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost1_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPost2_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
#write.csv(modelDataOrdered, "X3_Data/x3pilotDataModelOptimizedSorted.csv")
write.csv(modelDataOrdered, "x3pilotDataModelOptimizedSorted_global.csv")
################################################################################
x3pilotData <- x3pilotData[order(x3pilotData$CCode),]
myCCodes <- unique(x3pilotData$CCode)
avDataMatrix <- matrix(0,length(myCCodes),19)
dataPointIndex <- 0
workerData <- 0
rsaModel1 <- 0
rsaModel2 <- 0
runIndex <- 1
for(i in c(1:length(myCCodes))) {
cc <- myCCodes[i]
cases <- which(x3pilotData$CCode == cc)
allPilotDataCases <- x3pilotData[cases,]
workerMeans <- 0
rsaModel1Means <- 0
rsaModel2Means <- 0
for(j in c(1:nrow(allPilotDataCases))) {
workerMeans <-  workerMeans + allPilotDataCases[j,subjectGuessIndexM1+(allPilotDataCases$featValOrder[[j]])]
rsaModel1Means <- rsaModel1Means + allPilotDataCases[j,modelGuessIndex1M1+(allPilotDataCases$featValOrder[[j]])]
rsaModel2Means <- rsaModel2Means + allPilotDataCases[j,modelGuessIndex2M1+(allPilotDataCases$featValOrder[[j]])]
}
for(j in c(1:length(workerMeans))) {
workerData[runIndex] <- workerMeans[[j]] / nrow(allPilotDataCases)
rsaModel1[runIndex] <- rsaModel1Means[[j]] / nrow(allPilotDataCases)
rsaModel2[runIndex] <- rsaModel2Means[[j]] / nrow(allPilotDataCases)
runIndex <- runIndex+1
}
}
### plot after Optimization ###
rsaModel1 <- as.array(rsaModel1)
plot(rsaModel1, workerData)
abline(lm(formula = rsaModel1~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel1,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel1~workerData)
summary(model)
confint(model)
### plot with default parameters ###
rsaModel2 <- as.array(rsaModel2)
plot(rsaModel2, workerData)
abline(lm(formula = rsaModel2~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel2,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel2~workerData)
summary(model)
confint(model)
source("CommonCode/RSA_StratUtt.R")
source("CommonCode/getConstCodeStratUtt.R")
# loading the augmented pilot data file
################### full RSA ########################
### full RSA - individually optimized
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_fixed_and_PrefOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_KappaOnly_and_ObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_RSAindOpt_PrefAndKappa_and_PrefObedAndKappa.csv")
################### simple RSA ######################
### simple RSA - individually optimized
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed001_and_fixed000.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_prefOnly_and_obedOnly.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_kappaOnly_and_obedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_prefAndKappa_and_prefObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed00-1_and_uniform.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAindOpt_fixed001_and_Lambda.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefOnly_and_obedOnly.csv")
x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_kappaOnly_and_obedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_simpleRSAglobalOpt_prefAndKappa_and_prefObedAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_SRSAcrossVal_KappaOnly_and_PrefAndKappa.csv")
#x3pilotData <- read.csv("X3_Data/x3pDataAugm_SRSAcrossVal_ObedAndKappa_and_PrefObedAndKappa.csv")
## adding the 1-27 target and object2 & object3 code.
o1 <- x3pilotData$obj1OC27
o2 <- x3pilotData$obj2OC27
o3 <- x3pilotData$obj3OC27
##
###########
## filtering for only the present feature values for each feature.
###########
subjectGuessIndexM1 <- grep("^DPost_1", colnames(x3pilotData)) - 1
modelGuessIndex1M1 <- grep("^MPost1_1", colnames(x3pilotData)) - 1
modelGuessIndex2M1 <- grep("^MPost2_1", colnames(x3pilotData)) - 1
for(i in c(1:nrow(x3pilotData))) {
currentObjects <- c(o1[i], o2[i], o3[i])
validUtterances <- determineValidUtterances(currentObjects)
for(j in c(1:3)) { # iterating over the three feature types
relevantIndices <- which(validUtterances>(3*(j-1)) & validUtterances<(3*j + 1)) # relevant indices for a particular feature type
valUttRel <- validUtterances[relevantIndices]
# setting the non-represented values to NA
for(v in c(1:3)) {
if(length(which(valUttRel == ((j-1)*3) + v )) == 0) {
x3pilotData[[subjectGuessIndexM1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex1M1 + ((j-1)*3) + v]][i] <- NA
x3pilotData[[modelGuessIndex2M1 + ((j-1)*3) + v]][i] <- NA
}
}
}
}
## now determining the constellation code.
uniqueCCode <- rep(0, length(x3pilotData$X))
featureOrder <- matrix(0, length(x3pilotData$X), 3)
objectOrder <- matrix(0, length(x3pilotData$X), 3)
featureValueOrder <- list()
for(i in c(1:length(x3pilotData$X))) {
objectConstellation <- c(o1[i],o2[i],o3[i])
cc <- getUtteranceChoiceConstellationCode(objectConstellation)
uniqueCCode[i] <- cc[[1]]
featureOrder[i,] <- cc[[2]]
objectOrder[i,] <- cc[[3]]
featureValueOrder[[i]] <- cc[[4]]
}
# feature order specifies reordering of standard order (e.g. shape=1, texture=2, color=3)
# object order specifies reordering of presented object order
# featureValueOrder specifies how the present feature in an object constellation should be ordered.
subjectGuessIndex <- grep("^DPost_1", colnames(x3pilotData))
modelGuessIndex1 <- grep("^MPost1_1", colnames(x3pilotData))
modelGuessIndex2 <- grep("^MPost2_1", colnames(x3pilotData))
x3pilotData$CCode <- uniqueCCode
x3pilotData$featValOrder <- featureValueOrder
modelDataOrdered <- matrix(-1,nrow(x3pilotData),34)
for(i in c(1:length(x3pilotData$X))) {
for(j in c(1:length(x3pilotData$featValOrder[[i]]))) {
modelDataOrdered[i,7+j] <- x3pilotData[[subjectGuessIndexM1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,16+j] <- x3pilotData[[modelGuessIndex1M1+x3pilotData$featValOrder[[i]][j]]][i]
modelDataOrdered[i,25+j] <- x3pilotData[[modelGuessIndex2M1+x3pilotData$featValOrder[[i]][j]]][i]
}
}
modelDataOrdered[,1] <- uniqueCCode
modelDataOrdered[,2] <- x3pilotData$obj1
modelDataOrdered[,3] <- x3pilotData$obj2
modelDataOrdered[,4] <- x3pilotData$obj3
modelDataOrdered[,5] <- x3pilotData$obj1OC27
modelDataOrdered[,6] <- x3pilotData$obj2OC27
modelDataOrdered[,7] <- x3pilotData$obj3OC27
#write.csv(modelDataOrdered, "X3_Data/x3pilotDataModelOptimizedSorted.csv")
write.csv(modelDataOrdered, "X3_Data/x3pilotDataModelOptimizedSorted_global.csv")
################################################################################
x3pilotData <- x3pilotData[order(x3pilotData$CCode),]
myCCodes <- unique(x3pilotData$CCode)
avDataMatrix <- matrix(0,length(myCCodes),19)
dataPointIndex <- 0
workerData <- 0
rsaModel1 <- 0
rsaModel2 <- 0
runIndex <- 1
for(i in c(1:length(myCCodes))) {
cc <- myCCodes[i]
cases <- which(x3pilotData$CCode == cc)
allPilotDataCases <- x3pilotData[cases,]
workerMeans <- 0
rsaModel1Means <- 0
rsaModel2Means <- 0
for(j in c(1:nrow(allPilotDataCases))) {
workerMeans <-  workerMeans + allPilotDataCases[j,subjectGuessIndexM1+(allPilotDataCases$featValOrder[[j]])]
rsaModel1Means <- rsaModel1Means + allPilotDataCases[j,modelGuessIndex1M1+(allPilotDataCases$featValOrder[[j]])]
rsaModel2Means <- rsaModel2Means + allPilotDataCases[j,modelGuessIndex2M1+(allPilotDataCases$featValOrder[[j]])]
}
for(j in c(1:length(workerMeans))) {
workerData[runIndex] <- workerMeans[[j]] / nrow(allPilotDataCases)
rsaModel1[runIndex] <- rsaModel1Means[[j]] / nrow(allPilotDataCases)
rsaModel2[runIndex] <- rsaModel2Means[[j]] / nrow(allPilotDataCases)
runIndex <- runIndex+1
}
}
### plot after Optimization ###
rsaModel1 <- as.array(rsaModel1)
plot(rsaModel1, workerData)
abline(lm(formula = rsaModel1~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel1,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel1~workerData)
summary(model)
confint(model)
### plot with default parameters ###
rsaModel2 <- as.array(rsaModel2)
plot(rsaModel2, workerData)
abline(lm(formula = rsaModel2~workerData), col="red") # regression line (y~x)
lines(lowess(rsaModel2,workerData), col="blue") # lowess line (x,y)
model <- lm(formula = rsaModel2~workerData)
summary(model)
confint(model)
data = read.csv("X3_Data/x3pilotDataModelOptimizedSorted.csv")
colnames(data) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
summary(data$CCode)
global <- read.csv("X3_Data/x3pilotDataModelOptimizedSorted_global.csv")
colnames(global) <- c("workerid","CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27",
"DPost_1","DPost_2","DPost_3","DPost_4","DPost_5",
"DPost_6","DPost_7","DPost_8","DPost_9",
"MPost1_1","MPost1_2","MPost1_3","MPost1_4",
"MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9",
"MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5",
"MPost2_6","MPost2_7","MPost2_8","MPost2_9")
#sample2 <- subset(data, CCode == "22a1")
#sample3 <- subset(data, CCode == "322a")
#unsorted <- read.csv("x3pilotDataAugmV0_fixedAndD_052019.csv")
# sample <- data.frame(apply(sample, 2, function(x) {x <- gsub("\"", "", x)}))
sample <- subset(data, CCode == "22b2b")
sample_global <- subset(global, CCode == "22b2b")
#sample <- subset(data, CCode == "22a1")
# currentObjects <- c(23,4,19)
# featureValueOrder[[19]] # Order of feature values for a particular object combination of class 22b2b, we need it to label the bars
## Now reshape the table
# sample <- sample3
behavior <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("DPost_1","DPost_2","DPost_3","DPost_4","DPost_5","DPost_6","DPost_7","DPost_8","DPost_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
modelNotOpt <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost1_1","MPost1_2","MPost1_3","MPost1_4","MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
model <- melt(sample,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost2_1","MPost2_2","MPost2_3","MPost2_4","MPost2_5","MPost2_6","MPost2_7","MPost2_8","MPost2_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
globalOpt <- melt(sample_global,
id.vars = c("CCode","obj1","obj2","obj3","obj1OC27","obj2OC27","obj3OC27"),
measure.vars = c("MPost1_1","MPost1_2","MPost1_3","MPost1_4","MPost1_5","MPost1_6","MPost1_7","MPost1_8","MPost1_9"),
variable.name = "sliderNumber",value.name = "sliderValue")
behavior$sliderNumber <- gsub(paste0("DPost_",collapse = "|"),"", behavior$sliderNumber)
modelNotOpt$sliderNumber <- gsub(paste0("MPost1_",collapse = "|"),"", modelNotOpt$sliderNumber)
model$sliderNumber <- gsub(paste0("MPost2_",collapse = "|"),"", model$sliderNumber)
globalOpt$sliderNumber <- gsub(paste0("MPost1_",collapse = "|"),"", globalOpt$sliderNumber)
# behavior$sliderValue <- as.numeric(behavior$sliderValue)
statsBehavior <- summarySE(behavior, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModelNotOpt <- summarySE(modelNotOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsModel <- summarySE(model, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsGlobal <- summarySE(globalOpt, measurevar="sliderValue", groupvars="sliderNumber",na.rm = TRUE)
statsBehavior$type <- "behavior"
statsModel$type <- "model"
statsModelNotOpt$type <- "modelNotOpt"
statsGlobal$type <- "global"
behaviorPlot <- statsBehavior[c(1:6),]
modelPlot <- statsModel[c(1:6),]
modelNotOptPlot <- statsModelNotOpt[c(1:6),]
globalPlot <- statsGlobal[c(1:6),]
allStats <- rbind(behaviorPlot,modelPlot,modelNotOptPlot,globalPlot)
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")+
#  theme (axis.text.x=element_text(size = 16),
#        axis.text.y=element_text(size = 16),
#         axis.title.x=element_text(size = 16),
##        axis.title.y=element_text(size = 16),
#         legend.text=element_text(size = 14))
#ggsave("utterancePlot.pdf")
ggsave("barplot_x3_withGlobal.pdf",width=6.5,height=4.5, units = "in")
ggplot(allStats, aes(x=sliderNumber, y=sliderValue, fill = type)) +
geom_bar(position=position_dodge(.9), colour="black", stat="identity") +
#  coord_flip()+
geom_errorbar(position=position_dodge(.9), width=.25, aes(ymin=sliderValue-ci, ymax=sliderValue+ci)) +
scale_fill_manual(values = c("white","ivory2","ivory3","ivory4"), labels = c("Data","Globally opt.", "Indiv. opt", "Non-opt."), name = "") +
theme_bw(base_size = 18)+
#  labs(title="Example of class 22b2b")+
ylab("Slider value (normalized)")+
xlab("")+
scale_x_discrete(limits=c("1","2","3","4","5","6"),
labels=c("cloud", "circle", "striped","solid","blue","green"))+
theme(legend.position="bottom")+
#  theme (axis.text.x=element_text(size = 16),
#        axis.text.y=element_text(size = 16),
#         axis.title.x=element_text(size = 16),
##        axis.title.y=element_text(size = 16),
#         legend.text=element_text(size = 14))
#ggsave("utterancePlot.pdf")
ggsave("X3_Plots/barplot_x3_withGlobal.pdf",width=6.5,height=4.5, units = "in")
