# print(objPrefPosterior)
KLvalue <-
KLdivergence(preferencesPrior, featurePrefsPosterior)
# log-likelihood interpretation of KLvalue:
prefPost <-
prefPost + mapUttToObjProbs[utt, obj] * utterancePrior[utt] *
preferencesPrior[pref] * objectPreferenceSoftPriors[[pref]][obj] *
exp(klValueFactor * KLvalue)
}
}
}
if (prefPost > 0) {
prefPostAll[pref] <- prefPost
}
}
postUttGPrefPrior[utt] <- sum(prefPostAll)
}
if (sum(postUttGPrefPrior) == 0)
# no gain from any utterance...
return(rep(1 / length(relevantUtterances), length(relevantUtterances)))
return(postUttGPrefPrior / sum(postUttGPrefPrior))
}
getAllObjectCodes <- function(allObjects, allUtterancesNew1) {
allObjectCodes <- c(rep("000":length(allObjects[, 1])))
for (shape in c(1:length(allObjects[, 1]))) {
shapeNo <- which(allUtterancesNew1 == allObjects[shape, 1])
allObjectCodes[shape] <- shapeNo * 100
}
for (texture in c(1:length(allObjects[, 2]))) {
textureNo <- which(allUtterancesNew1 == allObjects[texture, 2]) - 3
allObjectCodes[texture] <-
allObjectCodes[texture] + (textureNo * 10)
}
for (color in c(1:length(allObjects[, 3]))) {
colorNo <- which(allUtterancesNew1 == allObjects[color, 3]) - 6
allObjectCodes[color] <- allObjectCodes[color] + colorNo
}
return(allObjectCodes)
}
#which(allObjectCodes%in%c(111,331,113))
getPreferencesPrior <- function(targetFeature) {
preferencesPrior <- c(rep(0, 9))
index <- targetFeature * 3
indices <- c(index, index - 1, index - 2)
preferencesPrior[indices] <- 1
return(preferencesPrior / sum(preferencesPrior))
}
evaluate <-
function(allUtterancePref,
preferencesPrior,
targetFeature) {
index <- targetFeature * 3
indices <- c(index - 2, index - 1, index)
tarFeaPref <- allUtterancePref[indices, ]
if (length(preferencesPrior) > 3){
tarFeaPrefPrior <- preferencesPrior[indices]
} else {tarFeaPrefPrior <- preferencesPrior}
prefRank <-
order(as.numeric(tarFeaPref[, 3]))#, ties.method = "first")
# cat("prefRank", prefRank)
prefPriorRank <-
order(tarFeaPrefPrior) #, ties.method = "first")
# cat("prefPriorRank", prefPriorRank)
# if (prefRank == prefPriorRank){
#   evalNum <- 3
# } else if (prefRank == c(prefPriorRank[1],prefPriorRank[3],prefPriorRank[2]) || prefRank == c(prefPriorRank[2],prefPriorRank[1],prefPriorRank[3])){
#   evalNum <- 2
# }else if (prefRank == c(prefPriorRank[2],prefPriorRank[3],prefPriorRank[1]) || prefRank == c(prefPriorRank[3],prefPriorRank[1],prefPriorRank[2])){
#   evalNum <- 1
# }else if (prefRank == c(prefPriorRank[3],prefPriorRank[2],prefPriorRank[1])){
#   evalNum <- 0
# }
if (identical(prefRank, prefPriorRank)) {
evalNum <- 3
} else if (identical(prefPriorRank, c(prefRank[1], prefRank[3], prefRank[2])) ||
identical(prefPriorRank, c(prefRank[2], prefRank[1], prefRank[3]))) {
evalNum <- 2
} else if (identical(prefPriorRank, c(prefRank[2], prefRank[3], prefRank[1])) ||
identical(prefPriorRank, c(prefRank[3], prefRank[1], prefRank[2]))) {
evalNum <- 1
} else if (identical(prefPriorRank, c(prefRank[3], prefRank[2], prefRank[1]))) {
evalNum <- 0
}
return(evalNum)
}
## Tests 1:
# notObeyInst <- 1e-10
# softPrefValue <- 0.1
# currentObjects <- c(1,9, 19)
# relevantUtterances <- determineValidUtterances(currentObjects)
# mapObjToUtt <- determineObjectToUtterancesMapping(currentObjects)
# mapUttToObjProbs <- determineUtteranceToObjectProbabilities(relevantUtterances,
#                                                             currentObjects,
#                                                             mapObjToUtt, notObeyInst)
# mapUttToPref <- getMapUttToPref(relevantUtterances, allObjects, allUtterancePref)
# objectPreferenceSoftPriors <- getObjectPreferencePriors(relevantUtterances, currentObjects, softPrefValue, mapUttToObjProbs, mapUttToPref)
# allUtterancePref <- getAllUtterancePref(c(1e-10, 1e-5, 1))
# allUtterancePref
# simplePragmaticSpeaker(4, 1, c(0, 0, 0, 0, 0, 1), relevantUtterances, currentObjects,
#                  mapUttToObjProbs, objectPreferenceSoftPriors) # sanity check - definite prior, no inf. gain possible
# preferencesPrior <- c(0, 0, 0, .2, .2, .2, 0, 0, 0)
# utterance <- 2
# obj <- 2
# preferencesPrior <- simplePragmaticSpeaker(utterance, obj, preferencesPrior, relevantUtterances, currentObjects,objectPreferenceSoftPriors, allUtterancePref, mapUttToObjToPref) # NON compliant listener...
# preferencesPrior <- simplePragmaticSpeaker(utterance, obj, preferencesPrior,relevantUtterances, currentObjects, mapUttToObjProbs, objectPreferenceSoftPriors)
# preferencesPrior
# # # Tests 2:
# # notObeyInst <- 0.1
# # softPrefValue <- .01
# # currentObjects <- c(1,2,6)
# # relevantUtterances <- determineValidUtterances(currentObjects)
# # mapObjToUtt <- determineObjectToUtterancesMapping(currentObjects)
# mapUttToObjProbs <- determineUtteranceToObjectProbabilities(relevantUtterances,
#                                                             currentObjects,
#                                                             mapObjToUtt, notObeyInst)
# objectPreferenceSoftPriors <- getObjectPreferencePriors(relevantUtterances, currentObjects,
#                                                         softPrefValue, mapUttToObjProbs)
# # simpleBestInfGainUtterance <- function(preferencesPrior, relevantUtterances, currentObjects,
# #                                 mapUttToObjProbs, objectPreferenceSoftPriors)
# simpleBestInfGainUtterance(c(0, 0, 0, 0, 0, 0, 1), relevantUtterances, currentObjects,
#                     mapUttToObjProbs, objectPreferenceSoftPriors) # sanity check - definite prior, no inf. gain possible
# round(simpleBestInfGainUtterance(c(1/6, 1/6, 1/6, 1/6, 1/6, 1/6, 0), relevantUtterances, currentObjects,
#                     mapUttToObjProbs, objectPreferenceSoftPriors), 3) # sanity check - definite prior, no inf. gain possible
#
# # kldFact <- (c(0:200)-100)/2
# # kldRes <- matrix(0,length(kldFact),6)
# # for(i in c(1:length(kldFact))) {
# #   kldRes[i,] <- round(bestInfGainUtterance(c(.1666, .1666, .1666, .1666, .1666, .1666, 0), relevantUtterances, currentObjects,
# #                              mapUttToObjProbs, objectPreferenceSoftPriors, alpha, kldFact[i]), 3) # sanity check - definite prior, no inf. gain possible
# # }
# # plot(kldFact, kldRes[,1], ylim = c(0:1))
# # lines(kldFact, kldRes[,2], col="black")
# # lines(kldFact, kldRes[,3], col="grey")
# # lines(kldFact, kldRes[,4], col="yellow")
# # lines(kldFact, kldRes[,5], col="orange")
# # lines(kldFact, kldRes[,6], col="blue")
# #
# # bestInfGainUtterance(c(.1666, .1666, .1666, .1666, .1666, .1666, 0), relevantUtterances, currentObjects,
# #                      mapUttToObjProbs, objectPreferenceSoftPriors, alpha, kldFact[i])
# #
# # round(pragmaticSpeaker(4, 1, c(.1666, .1666, .1666, .1666, .1666, .1666, 0),
# #                              relevantUtterances, currentObjects, mapUttToObjProbs,
# #                              objectPreferenceSoftPriors, alpha), 3)
#
#
x4pilotData <- read.csv("X9_Data/ella_total_allDataCleaned.csv")
uttFeat <- ifelse(x4pilotData$utterance=="green" | x4pilotData$utterance=="red" | x4pilotData$utterance=="blue", 3,
ifelse(x4pilotData$utterance=="solid" | x4pilotData$utterance=="striped" | x4pilotData$utterance=="polka-dotted", 2, 1))
x4pilotData$uttFeat <- uttFeat
q1Feat <- x4pilotData$targetFeatureNum
# q1Feat <- ifelse(x4pilotData$pref1=="green things" | x4pilotData$pref1=="red things" | x4pilotData$pref1=="blue things", 3,
#                  ifelse(x4pilotData$pref1=="solid things" | x4pilotData$pref1=="striped things" | x4pilotData$pref1=="polka-dotted things", 2,
#                         ifelse(x4pilotData$pref1=="clouds" | x4pilotData$pref1=="circles" | x4pilotData$pref1=="squares", 1,
#                                -1 ) ))
x4pilotData$q1Feat <- x4pilotData$targetFeature
# q2Feat <- ifelse(x4pilotData$pref4=="green things" | x4pilotData$pref4=="red things" | x4pilotData$pref4=="blue things", 3,
#                  ifelse(x4pilotData$pref4=="solid things" | x4pilotData$pref4=="striped things" | x4pilotData$pref4=="polka-dotted things", 2,
#                         ifelse(x4pilotData$pref4=="clouds" | x4pilotData$pref4=="circles" | x4pilotData$pref4=="squares", 1,
#                                -1 ) ))
# x4pilotData$q2Feat <- q2Feat
## adding the 1-27 target and object2 & object3 code.
temp <- x4pilotData$obj1
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
targetOC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$targetOC27 <- targetOC27
temp <- x4pilotData$obj2
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
obj2OC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$obj2OC27 <- obj2OC27
temp <- x4pilotData$obj3
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
obj3OC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$obj3OC27 <- obj3OC27
## now determining the recorded subject responses
subjectResponses <- matrix(0,length(x4pilotData$X),6)
# postListMat <- matrix(0,length(pilotData$X),9)
# logLik <- rep(0,length(pilotData$X))
for(i in c(1:length(x4pilotData$X))) {
# objectConstellation <- c(targetOC27[i],obj2OC27[i],obj3OC27[i])
# featChoice <- uttFeat[i]
# postListMat[i,] <- determineSpeakerPostListPrefs(objectConstellation, featChoice, .1, 0)
# print(c(objectConstellation, featChoice))
#
subjectResponses[i,1] <- x4pilotData$normResponse0[i] + 1e-100
subjectResponses[i,2] <- x4pilotData$normResponse1[i] + 1e-100
subjectResponses[i,3] <- x4pilotData$normResponse2[i] + 1e-100
subjectResponses[i,4] <-  0
subjectResponses[i,5] <- 0
subjectResponses[i,6] <-  0
subjectResponses[i,1:3] <- subjectResponses[i,1:3] / sum(subjectResponses[i,1:3])
#  subjectResponses[i,4:6] <- subjectResponses[i,4:6] / sum(subjectResponses[i,4:6])
}
## ordering the recorded subject responses such that they can be compared directly
#   to the model predictions
##             (particularly for visual comparison in the table)
subjectResponsesOrdered <- matrix(NA ,length(x4pilotData$X),9)
for(i in c(1:length(x4pilotData$X))) {
for(j in 1:3) {
subjectResponsesOrdered[i, (j+(q1Feat[i]-1)*3)] <- subjectResponses[i,j]
}
#  for(j in 1:3) {
#    subjectResponsesOrdered[i, (j+(q2Feat[i]-1)*3)] <- subjectResponses[i,3+j]
#  }
}
subjectResponsesOrdered <- round(subjectResponsesOrdered, digits=5)
## recording KL divergence and parameters (base model, 1 param, 2 params)
workerIDs <- x4pilotData$workerid
idMax <- max(workerIDs)
klDivWorkers12 <- matrix(0,length(unique(workerIDs)), 10)
paramsWorkers12 <- matrix(0,length(unique(workerIDs)), 14)
##########
## Starting with simple base model determination:
##
workerIndex <- 1
for(workerID in c(0:idMax)) {
idICases <- which(workerIDs == workerID)
if(length(idICases)>0) {
klDivWorkers12[workerIndex,1] <- workerID
paramsWorkers12[workerIndex,1] <- workerID
## based model -> no change in preferences!
klDivWorkers12[workerIndex,2] <- 0 # -2 * length(idICases) * log(1/3)
for(i in c(1:length(idICases))) {
for(j in c(1:6)) {
if(subjectResponses[idICases[i],j] > 0){
klDivWorkers12[workerIndex, 2] <- klDivWorkers12[workerIndex, 2] +
subjectResponses[idICases[i],j] *
(log(subjectResponses[idICases[i],j]) - log(1/3))
#     print(klDivWorkers12[workerIndex, 2])
}
}
}
## done with this worker -> proceed
workerIndex <- workerIndex + 1
}
}
allIndices <- c(1:length(workerIDs))
## generating data matrix for the purpose of optimization
dataWorker <- matrix(0, length(allIndices), 12)
dataWorker[,1] <- targetOC27[allIndices]
dataWorker[,2] <- obj2OC27[allIndices]
dataWorker[,3] <- obj3OC27[allIndices]
dataWorker[,4] <- uttFeat[allIndices]
dataWorker[,5] <- q1Feat[allIndices]
#dataWorker[,6] <- q2Feat[allIndices]
dataWorker[,7:12] <- subjectResponses[allIndices,1:6]
# before optimization:         klDivWorkers12[1,3] <- RSAModelLL1(c(.2), dataWorker)
optRes1 <- optimize(RSAModelLL1_1simpleRSA, c(0, 1e+10), dataWorker)
source("sRSA-dialogic/SRSA_StratUtt.R")
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08/X9_Code/sRSA-dialogic")
source("SRSA_StratUtt.R")
source("CommonCode/SRSA_StratUttOptimization.R")
source("SRSA_StratUttOptimization.R")
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08/X9_Code/sRSA-dialogic")
source("SRSA_StratUtt.R")
source("SRSA_StratUttOptimization.R")
source("SRSA_StratUttOptimization.R")
source("SRSA_StratUtt.R")
source("SRSA_StratUttOptimization.R")
x4pilotData <- read.csv("X9_Data/ella_total_allDataCleaned.csv")
# adding feature property codes (which feature was uttereed, which features were questioned)
uttFeat <- ifelse(x4pilotData$utterance=="green" | x4pilotData$utterance=="red" | x4pilotData$utterance=="blue", 3,
ifelse(x4pilotData$utterance=="solid" | x4pilotData$utterance=="striped" | x4pilotData$utterance=="polka-dotted", 2, 1))
x4pilotData$uttFeat <- uttFeat
q1Feat <- x4pilotData$targetFeatureNum
# q1Feat <- ifelse(x4pilotData$pref1=="green things" | x4pilotData$pref1=="red things" | x4pilotData$pref1=="blue things", 3,
#                  ifelse(x4pilotData$pref1=="solid things" | x4pilotData$pref1=="striped things" | x4pilotData$pref1=="polka-dotted things", 2,
#                         ifelse(x4pilotData$pref1=="clouds" | x4pilotData$pref1=="circles" | x4pilotData$pref1=="squares", 1,
#                                -1 ) ))
x4pilotData$q1Feat <- x4pilotData$targetFeature
# q2Feat <- ifelse(x4pilotData$pref4=="green things" | x4pilotData$pref4=="red things" | x4pilotData$pref4=="blue things", 3,
#                  ifelse(x4pilotData$pref4=="solid things" | x4pilotData$pref4=="striped things" | x4pilotData$pref4=="polka-dotted things", 2,
#                         ifelse(x4pilotData$pref4=="clouds" | x4pilotData$pref4=="circles" | x4pilotData$pref4=="squares", 1,
#                                -1 ) ))
# x4pilotData$q2Feat <- q2Feat
## adding the 1-27 target and object2 & object3 code.
temp <- x4pilotData$obj1
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
targetOC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$targetOC27 <- targetOC27
temp <- x4pilotData$obj2
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
obj2OC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$obj2OC27 <- obj2OC27
temp <- x4pilotData$obj3
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
obj3OC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$obj3OC27 <- obj3OC27
## now determining the recorded subject responses
subjectResponses <- matrix(0,length(x4pilotData$X),6)
# postListMat <- matrix(0,length(pilotData$X),9)
# logLik <- rep(0,length(pilotData$X))
for(i in c(1:length(x4pilotData$X))) {
# objectConstellation <- c(targetOC27[i],obj2OC27[i],obj3OC27[i])
# featChoice <- uttFeat[i]
# postListMat[i,] <- determineSpeakerPostListPrefs(objectConstellation, featChoice, .1, 0)
# print(c(objectConstellation, featChoice))
#
subjectResponses[i,1] <- x4pilotData$normResponse0[i] + 1e-100
subjectResponses[i,2] <- x4pilotData$normResponse1[i] + 1e-100
subjectResponses[i,3] <- x4pilotData$normResponse2[i] + 1e-100
subjectResponses[i,4] <-  0
subjectResponses[i,5] <- 0
subjectResponses[i,6] <-  0
subjectResponses[i,1:3] <- subjectResponses[i,1:3] / sum(subjectResponses[i,1:3])
#  subjectResponses[i,4:6] <- subjectResponses[i,4:6] / sum(subjectResponses[i,4:6])
}
## ordering the recorded subject responses such that they can be compared directly
#   to the model predictions
##             (particularly for visual comparison in the table)
subjectResponsesOrdered <- matrix(NA ,length(x4pilotData$X),9)
for(i in c(1:length(x4pilotData$X))) {
for(j in 1:3) {
subjectResponsesOrdered[i, (j+(q1Feat[i]-1)*3)] <- subjectResponses[i,j]
}
#  for(j in 1:3) {
#    subjectResponsesOrdered[i, (j+(q2Feat[i]-1)*3)] <- subjectResponses[i,3+j]
#  }
}
subjectResponsesOrdered <- round(subjectResponsesOrdered, digits=5)
## recording KL divergence and parameters (base model, 1 param, 2 params)
workerIDs <- x4pilotData$workerid
idMax <- max(workerIDs)
klDivWorkers12 <- matrix(0,length(unique(workerIDs)), 10)
paramsWorkers12 <- matrix(0,length(unique(workerIDs)), 14)
##########
## Starting with simple base model determination:
##
workerIndex <- 1
for(workerID in c(0:idMax)) {
idICases <- which(workerIDs == workerID)
if(length(idICases)>0) {
klDivWorkers12[workerIndex,1] <- workerID
paramsWorkers12[workerIndex,1] <- workerID
## based model -> no change in preferences!
klDivWorkers12[workerIndex,2] <- 0 # -2 * length(idICases) * log(1/3)
for(i in c(1:length(idICases))) {
for(j in c(1:6)) {
if(subjectResponses[idICases[i],j] > 0){
klDivWorkers12[workerIndex, 2] <- klDivWorkers12[workerIndex, 2] +
subjectResponses[idICases[i],j] *
(log(subjectResponses[idICases[i],j]) - log(1/3))
#     print(klDivWorkers12[workerIndex, 2])
}
}
}
## done with this worker -> proceed
workerIndex <- workerIndex + 1
}
}
# loading the raw pilot data (as Greg sent it on 2018/12/21)
x4pilotData <- read.csv("ella_total_allDataCleaned.csv")
uttFeat <- ifelse(x4pilotData$utterance=="green" | x4pilotData$utterance=="red" | x4pilotData$utterance=="blue", 3,
ifelse(x4pilotData$utterance=="solid" | x4pilotData$utterance=="striped" | x4pilotData$utterance=="polka-dotted", 2, 1))
x4pilotData$uttFeat <- uttFeat
q1Feat <- x4pilotData$targetFeatureNum
# q1Feat <- ifelse(x4pilotData$pref1=="green things" | x4pilotData$pref1=="red things" | x4pilotData$pref1=="blue things", 3,
#                  ifelse(x4pilotData$pref1=="solid things" | x4pilotData$pref1=="striped things" | x4pilotData$pref1=="polka-dotted things", 2,
#                         ifelse(x4pilotData$pref1=="clouds" | x4pilotData$pref1=="circles" | x4pilotData$pref1=="squares", 1,
#                                -1 ) ))
x4pilotData$q1Feat <- x4pilotData$targetFeature
# q2Feat <- ifelse(x4pilotData$pref4=="green things" | x4pilotData$pref4=="red things" | x4pilotData$pref4=="blue things", 3,
#                  ifelse(x4pilotData$pref4=="solid things" | x4pilotData$pref4=="striped things" | x4pilotData$pref4=="polka-dotted things", 2,
#                         ifelse(x4pilotData$pref4=="clouds" | x4pilotData$pref4=="circles" | x4pilotData$pref4=="squares", 1,
#                                -1 ) ))
# x4pilotData$q2Feat <- q2Feat
## adding the 1-27 target and object2 & object3 code.
temp <- x4pilotData$obj1
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
targetOC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$targetOC27 <- targetOC27
temp <- x4pilotData$obj2
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
obj2OC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$obj2OC27 <- obj2OC27
temp <- x4pilotData$obj3
temp2 <- (temp - temp %% 10) / 10
temp3 <- (temp2 - temp2 %% 10) / 10
obj3OC27 <- temp3 + 3 * ((temp2 %% 10) - 1) + 9 * ((temp %% 10) - 1)
x4pilotData$obj3OC27 <- obj3OC27
## now determining the recorded subject responses
subjectResponses <- matrix(0,length(x4pilotData$X),6)
# postListMat <- matrix(0,length(pilotData$X),9)
# logLik <- rep(0,length(pilotData$X))
for(i in c(1:length(x4pilotData$X))) {
# objectConstellation <- c(targetOC27[i],obj2OC27[i],obj3OC27[i])
# featChoice <- uttFeat[i]
# postListMat[i,] <- determineSpeakerPostListPrefs(objectConstellation, featChoice, .1, 0)
# print(c(objectConstellation, featChoice))
#
subjectResponses[i,1] <- x4pilotData$normResponse0[i] + 1e-100
subjectResponses[i,2] <- x4pilotData$normResponse1[i] + 1e-100
subjectResponses[i,3] <- x4pilotData$normResponse2[i] + 1e-100
subjectResponses[i,4] <-  0
subjectResponses[i,5] <- 0
subjectResponses[i,6] <-  0
subjectResponses[i,1:3] <- subjectResponses[i,1:3] / sum(subjectResponses[i,1:3])
#  subjectResponses[i,4:6] <- subjectResponses[i,4:6] / sum(subjectResponses[i,4:6])
}
## ordering the recorded subject responses such that they can be compared directly
#   to the model predictions
##             (particularly for visual comparison in the table)
subjectResponsesOrdered <- matrix(NA ,length(x4pilotData$X),9)
for(i in c(1:length(x4pilotData$X))) {
for(j in 1:3) {
subjectResponsesOrdered[i, (j+(q1Feat[i]-1)*3)] <- subjectResponses[i,j]
}
#  for(j in 1:3) {
#    subjectResponsesOrdered[i, (j+(q2Feat[i]-1)*3)] <- subjectResponses[i,3+j]
#  }
}
subjectResponsesOrdered <- round(subjectResponsesOrdered, digits=5)
## recording KL divergence and parameters (base model, 1 param, 2 params)
workerIDs <- x4pilotData$workerid
idMax <- max(workerIDs)
klDivWorkers12 <- matrix(0,length(unique(workerIDs)), 10)
paramsWorkers12 <- matrix(0,length(unique(workerIDs)), 14)
##########
## Starting with simple base model determination:
##
workerIndex <- 1
for(workerID in c(0:idMax)) {
idICases <- which(workerIDs == workerID)
if(length(idICases)>0) {
klDivWorkers12[workerIndex,1] <- workerID
paramsWorkers12[workerIndex,1] <- workerID
## based model -> no change in preferences!
klDivWorkers12[workerIndex,2] <- 0 # -2 * length(idICases) * log(1/3)
for(i in c(1:length(idICases))) {
for(j in c(1:6)) {
if(subjectResponses[idICases[i],j] > 0){
klDivWorkers12[workerIndex, 2] <- klDivWorkers12[workerIndex, 2] +
subjectResponses[idICases[i],j] *
(log(subjectResponses[idICases[i],j]) - log(1/3))
#     print(klDivWorkers12[workerIndex, 2])
}
}
}
## done with this worker -> proceed
workerIndex <- workerIndex + 1
}
}
allIndices <- c(1:length(workerIDs))
## generating data matrix for the purpose of optimization
dataWorker <- matrix(0, length(allIndices), 12)
dataWorker[,1] <- targetOC27[allIndices]
dataWorker[,2] <- obj2OC27[allIndices]
dataWorker[,3] <- obj3OC27[allIndices]
dataWorker[,4] <- uttFeat[allIndices]
dataWorker[,5] <- q1Feat[allIndices]
#dataWorker[,6] <- q2Feat[allIndices]
dataWorker[,7:12] <- subjectResponses[allIndices,1:6]
# before optimization:         klDivWorkers12[1,3] <- RSAModelLL1(c(.2), dataWorker)
optRes1 <- optimize(RSAModelLL1_1simpleRSA, c(0, 1e+10), dataWorker)
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08/X9_Code/sRSA-dialogic")
source("SRSA_StratUtt.R")
source("AllUtterancesAndObjects.R")
library(gridExtra)
library(magrittr)
library(tidyverse)
library(rmarkdown)
whichDataSet <- 0
if (whichDataSet == 0) {
# pure data
inputData = read.csv(
"ella_total_allDataCleaned.csv",
header = TRUE,
na.strings = c("", " ", "NA")
)
totalWorker <-
length(unique(inputData$workerid)) - 1 # total worker is the highest workerid
} else if (whichDataSet == 1) {
inputData = read.csv("ella_total_trials.csv",
header = TRUE,
na.strings = c("", " ", "NA"))
totalWorker <- 94 # total worker is the highest workerid
} else if (whichDataSet == 2) {
# ambiguous data with first block
inputData = read.csv(
"ella_total_ambiguous.csv",
header = TRUE,
na.strings = c("", " ", "NA")
)
totalWorker <- 52
} else if (whichDataSet == 3) {
# ambiguous data without first block
inputData = read.csv(
"ella_total_ambiguous_wo_first_block.csv",
header = TRUE,
na.strings = c("", " ", "NA")
)
totalWorker <- 52
}
inputDataWO = read.csv(
"ella_total_ambiguous_wo_first_block.csv",
header = TRUE,
na.strings = c("", " ", "NA")
)
totalWorkerWO <- 52
notObeyInst <- 0
softPrefValue <- 1
allObjectCodes <- getAllObjectCodes(allObjects, allUtterancesNew1)
allObjectCodes
getAllObjectCodes
colnames(inputData)
