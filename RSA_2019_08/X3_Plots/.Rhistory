install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
install.packages("utils")
rep(1:2, each =3)
rep(1:2, each =3)
rep(1:2, each =3)
install.packages{"R.utils"}
install.packages("R.utils")
library(R.utils)
combn()
combn(i,s)
combn(0,1)
combn(0,1)
combn(as.vector(i,s))
x<-c(i,s)
x<-c(0,1)
x
combn(x,2)
combn(x,6)
combn(letters[1:5], 3)
combn(letters[1:5], 3)
combn(letters[1:2], 3)
library("gtools")
x<-c('a','b')
permutations(n=2,r=3,v=x,repeats.allowed=T)
permutations(n=3,r=2,v=x,repeats.allowed=T)
permutations(n=2,r=2,v=x,repeats.allowed=T)
x<-c('a','a','b')
permutations(n=2,r=2,v=x,repeats.allowed=T)
permutations(n=3,r=2,v=x,repeats.allowed=T)
permutations(n=2,r=2,v=x,repeats.allowed=T)
permutations(n=2,r=3,v=x,repeats.allowed=T)
permutations(n=2,r=6,v=x,repeats.allowed=T)
permutations(3, 3, letters[1:2])
permutations(3, 2, letters[1:2])
permutations(2, 3, letters[1:2])
x<-c('a','a','b')
permutations(2, 3, x)
permutations(3, 2, x)
x
permutations(x)
permutations(3,x)
a = letters[1:3]
> eg = expand.grid(a,a,a)
> eg[!(eg$Var1==eg$Var2 | eg$Var2==eg$Var3 | eg$Var1==eg$Var3),]
a = letters[1:3]
eg = expand.grid(a,a,a)
eg[!(eg$Var1==eg$Var2 | eg$Var2==eg$Var3 | eg$Var1==eg$Var3),]
a = c('a','a','b')
eg = expand.grid(a,a,a)
eg[!(eg$Var1==eg$Var2 | eg$Var2==eg$Var3 | eg$Var1==eg$Var3),]
getPerms <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
getPerms(letters[1:3])
getPerms(x)
x<-("s","s","s","i","i","i")
x<-c("s","s","s","i","i","i")
getPerms(x)
a=getPerms(x)
b=unique(a)
b
getPerms <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
x<-c("s","s","s","i","i","i")
a=getPerms(x)
b=unique(a)
b
getPerms <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
## Create a vector
x<-c("s","s","s","i","i","i")
a=getPerms(x)
## The function getPerms creates an output of n!, in our case 720 rows. We now need to filter our identical rows
b=unique(a)
b
col.names(b)<-c('4','8','12','6','10','14')
colnames(b)<-c('4','8','12','6','10','14')
b
count(b[,1:3], vars = "s")
library(plyr)
count(b[,1:3], vars = "s")
count(b[,1:3], "s")
y<-c(0,0,0,1,1,1)
full=getPerm(y)
full=getPerms(y)
small=unique(y)
small
full
small=y[(unique(y)),]
small=y[unique(y),]
x$Condition<-NA
transpose(b)
t(b)
subject=b[,1:3]
subject
object=b[,4:6]
as.data.frame(subject)
as.data.frame(object)
object$Sum<-NA
object=as.data.frame(object)
object$Sum<-NA
object
View(object)
View(subject)
b=unique(a)
subject=b[,1:3]
object=b[,4:6]
subject=as.data.frame(subject)
object=as.data.frame(object)
View(object)
View(subject)
count(object[,1:3], "s")
count(object[,1:3], s)
rowSums(object=s)
rowSums(object="s")
add.tally(object)
library(dplyr)
install.packages("dplyr")
library(dplyr)
add.tally(object)
add_tally(object)
install.packages("count-tally")
library(count-tally)
library("count-tally")
table(unlist(object))
count(object)
count(object==s)
count(object=="s")
object$new <- rowSums(object == s)
object$new <- rowSums(object == as.factor(s))
apply(object[-1],2,sum)
a
x
x<-c(s,s,s,i,i,i)
object$count <- rowSums(df[-1] == "s")
object
str(object)
objects$V4<-c(0)
objects[1,1]
object[1,1]
object[1,1]
object[1,3]
object[1,4]
object[2,3]
object[3,3]
object[4,3]
str(object)
as.matrix(object)
object$count <- rowSums(df[-1] == "s")
as.character(object$V3)
object$V3=as.character(object$V3)
object$V2=as.character(object$V2)
object$V1=as.character(object$V1)
object$count <- rowSums(df[-1] == "s")
object$count <- NA
head(object)
object$count <- rowSums(df[-1] == "s")
object$count <- rowSums(df[1] == "s")
count(object[1,])
count(object[2,])
count(object[3,])
data1=object
data1$count <- rowSums(df[-1] == "s")
data1$count <- rowSums(data1[-1] == "s")
head(data1)
data1$count <- rowSums(data1[1] == "s")
head(data)
data1$count <- rowSums(data1[2] == "s")
head(data)
data1$count <- rowSums(data1[-1] == "s")
head(data)
data1$count <- rowSums(df == "s")
head(data1)
data1$numberS <- if (rowSums(df == "s") = 0
data1$numberS <- if ((rowSums(df == "s") = 0)
)
)
else FALSe)
data1$numberS <- if ((rowSums(df == "s") = 0)
)))
data1$numberS <- if ((rowSums(df == "s") = 0)
{print exclude}
data1$numberS <- if ((rowSums(df == "s") = 0)
{print ("exclude")}
data1$numberS <- if (data1$count = 0)
{print ("exclude")}
object$count <- rowSums(df == "s")
data1$numberS <- if (data1$count = 0)
{print ("exclude")}
data1$numberS <- if (data1$count = 0) 0 else 1
data1$numberS <- if (data1$count = 0) 0 else 1
data1$numberS <- if (count=0) 0 else 1
head(data1)
data1$numberS <- if (data1$count = 3)
{print ("exclude")}
head(data1)
head(object)
object$count <- rowSums(df == "s")
head(object)
head(data1)
data1$countS <- rowSums(df == "s")
data1$countI <-rowSums(df == "i")
head(data1)
data1$V1=as.character(data1$V1)
data1$V2=as.character(data1$V2)
data1$V3=as.character(data1$V3)
data1$countI <-rowSums(df == "i")
library("dplyr")
data1$countI <-rowSums(df == "i")
dplyr::filter()
data1$countI <-rowSums[1:3, (df == "i")]
head(data1)
head(object)
data1$countI<-NA
data1$countI <-rowSums[1:3, (df == "i")]
head(data1)
data1$countI <-rowSums(df == "i")
head(data)
allcombinations=getPerms(x)
relevant combinations=unique(allcombinations)
relevantCombinations=unique(allcombinations)
colnames(relevantCombinations)<-c('4','8','12','6','10','14')
getPerms <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
## Function defined on stackoverflow ##
getPerms <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
[]
getPerms <- function(x) {
if (length(x) == 1) {
return(x)
}
else {
res <- matrix(nrow = 0, ncol = length(x))
for (i in seq_along(x)) {
res <- rbind(res, cbind(x[i], Recall(x[-i])))
}
return(res)
}
}
x<-c("s","s","s","i","i","i")
allcombinations=getPerms(x)
relevantCombinations=unique(allcombinations)
head(relevantCombinations)
colnames(relevantCombinations)<-c('4','8','12','6','10','14')
head(relevantCombinations)
relevantcombinations$count <- rowSums(df == "s") # Gives error message but works
head(relevantcombinations)
head(relevantCombinations)
relevantCombinations$count <- rowSums(df == "s") # Gives error message but works
relevantCombinations$count[1,3]
relevantCombinations$count[3]
relevantCombinations[1,3]
relevantCombinations[2,3]
x<-c("s","s","s","i","i","i")
allcombinations=getPerms(x)
relevantCombinations=unique(allcombinations)
colnames(relevantCombinations)<-c('4','8','12','6','10','14')
relevantCombinations
relevantcombinations$count <- rowSums(df == s) # Gives error message but works. Doesn't work anymo
relevantcombinations$count <- rowSums(df == "s") # Gives error message but works. Doesn't work anymo
head(relevantCombinations)
data1$countS <- if (count=0) 0 else 1
str(relevantCombinations)
relevant=as.data.frame(relevantCombinations)
relevant$count <- rowSums(df == "s") # Gives error message but works. Doesn't work anymore
str(relevant)
relevant$count <- rowSums(df == s) # Gives error message but works. Doesn't work anymore
library("plyr")
head(relevant)
count(relevant, c("4", "8", "12"))
relevant
relevant$count <- rowSums(df == "s") # Gives error message but works. Doesn't work anymore
rowSums(df == "s")
df
rowSums(relevant == "s")
relant
relevant
rowSums(relevant == "s")
object=relevant[,1:3]
head(object)
subject=relevant[,4:6]
rowSums(object == "s")
max(rowSums(object == "s"), rowSums(subject) == "s"))
?max
max(rowSums(object == "s"), rowSums(subject == "s"))
object$count<-rowSums(object == "s")
head(object)
subject$count<-rowSums(subject == "s")
head(subject)
overall=cbind(subject,object)
head(overall)
subject$count2<-rowSums(subject == "s")
overall=cbind(subject,object)
head(overall)
overallcount3<-if overall$count < 3
overallcount3<- overall$count < 3
& overall$count2 < 3
& overall$count2 < 3)
overallcount3<- ifelse (overall$count < 3 &
overall$count2 < 3, 1, 2)
overallcount3<-if overall$count < 3
overallcount3<- ifelse (overall$count < 3 &
overall$count2 < 3, 1, 2)
overallcount3
head(overall)
relevant$count <- rowSums(relevant == "s") # Gives error message but works. Doesn't work anymore
relevant
library("dplyr")
library("ggplot2")
setwd("~/Documents/GitHub/prior_inference/RSA_2019_08/X3_Plots")
full <- read.csv("for_scatterplots_x3_updated.csv")
head(full)
stats <- full %>%
group_by(softness,obedience, alpha, cross_validated, kl_factor,type, Nr) %>%
summarise(n_occur = n())
ordered <- stats[order(stats$Nr),] # Sort the summary table
print.data.frame(ordered)
write.csv(ordered, file = "List_of_models_x3.csv")
# for m10
plotData <- subset(full, Nr == 10)
r2 <- round((summary(lm(plotData$model~plotData$workerData))$r.squared), digits = 2)
ci <- round((confint(lm(plotData$model~plotData$workerData))), digits = 2)
ci <- ci[c(2,4)]
softness <- unique(as.character(plotData$softness))
obedience <- unique(as.character(plotData$obedience))
type <- unique(as.character(plotData$type))
kl_factor <- unique(as.character(plotData$kl_factor))
nr <- plotData$Nr[1]
model <- lm(formula = plotData$model~plotData$workerData)
summary(model)
confint(model)
plot(plotData$model, plotData$workerData, xlab = "model", ylab = "human data")
abline(lm(formula = plotData$model~plotData$workerData), col="red") # regression line (y~x)
lines(lowess(plotData$model,plotData$workerData), col="blue") # lowess line (x,y)
title(main = bquote(atop
(.(type) ~"," ~ r^2 == .(r2),
~ "softness" == .(softness) ~ "," ~ "obedience" == .(obedience)
)))
plotData <- subset(full, Nr == 20)
r2 <- round((summary(lm(plotData$model~plotData$workerData))$r.squared), digits = 2)
#ci <- round((confint(lm(plotData$model~plotData$workerData))), digits = 2)
#ci <- ci[c(2,4)]
softness <- unique(as.character(plotData$softness))
obedience <- unique(as.character(plotData$obedience))
type <- unique(as.character(plotData$type))
kl_factor <- unique(as.character(plotData$kl_factor))
nr <- plotData$Nr[1]
model <- lm(formula = plotData$model~plotData$workerData)
summary(model)
confint(model)
plot(plotData$model, plotData$workerData, xlab = "model", ylab = "human data")
abline(lm(formula = plotData$model~plotData$workerData), col="red") # regression line (y~x)
lines(lowess(plotData$model,plotData$workerData), col="blue") # lowess line (x,y)
title(main = bquote(atop
(.(type) ~"," ~ r^2 == .(r2),
~ "softness" == .(softness) ~ "," ~ "obedience" == .(obedience)
)))
